{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/python_logger/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Logging in Python\",\n  \"tags\": [\"gatsby\", \"code-notes\"],\n  \"emoji\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"basic-example\"\n  }, \"Basic example\"), mdx(\"p\", null, \"In the following example, we specify two handlers. So the messages will output to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stdout\"), \" and to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"log_file\"), \" at the same time.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"import logging\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\nformatter = logging.Formatter(\\n    \\\"%(levelname).1s%(asctime)s [%(module)s:%(lineno)d] %(message)s\\\",\\n    datefmt=\\\"%m%d %H%M%S\\\",\\n)\\n\\nstream_handler = logging.StreamHandler(sys.stdout)\\nstream_handler.setFormatter(formatter)\\nfile_handler = logging.FileHandler(log_file, mode=\\\"a\\\")\\nfile_handler.setFormatter(formatter)\\n\\nlogger.handlers = [stream_handler, file_handler]\\n\\nlogging.debug(\\\"this is debug\\\")\\nlogging.info(\\\"this is info\\\")\\nlogging.warning(\\\"this is warning\\\")\\nlogging.error(\\\"this is error\\\")\\nlogging.critical(\\\"this is critical\\\")\\n\")), mdx(\"p\", null, \"Example output:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"I0306 205253 [<ipython-input-4-3747c4192e4e>:17] this is info\\nW0306 205253 [<ipython-input-4-3747c4192e4e>:18] this is warning\\nE0306 205253 [<ipython-input-4-3747c4192e4e>:19] this is error\\nC0306 205253 [<ipython-input-4-3747c4192e4e>:20] this is critical\\n\")), mdx(\"h2\", {\n    \"id\": \"colorful-example\"\n  }, \"Colorful example\"), mdx(\"p\", null, \"It has dependency on a non-builtin package, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colorma\"), \". Also it will be more difficult to tweak the settings. However, colorful messages could be useful in Jupyter.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"import logging\\nfrom colorama import Fore, Back, Style\\n\\n\\nclass ColoredFormatter(logging.Formatter):\\n    \\\"\\\"\\\"Colored log formatter.\\\"\\\"\\\"\\n\\n    def __init__(\\n        self, *args, colors: Optional[Dict[str, str]] = None, **kwargs\\n    ) -> None:\\n        \\\"\\\"\\\"Initialize the formatter with specified format strings.\\\"\\\"\\\"\\n\\n        super().__init__(*args, **kwargs)\\n\\n        self.colors = colors if colors else {}\\n\\n    def format(self, record) -> str:\\n        \\\"\\\"\\\"Format the specified record as text.\\\"\\\"\\\"\\n\\n        record.color = self.colors.get(record.levelname, \\\"\\\")\\n        record.reset = Style.RESET_ALL\\n\\n        return super().format(record)\\n\\n\\nformatter = ColoredFormatter(\\n    \\\"[{asctime} {name}] {color}{message}{reset}\\\",\\n    style=\\\"{\\\",\\n    datefmt=\\\"%m%d %H:%M:%S\\\",\\n    colors={\\n        \\\"DEBUG\\\": Fore.LIGHTBLACK_EX,\\n        \\\"INFO\\\": Fore.GREEN + Style.BRIGHT,\\n        \\\"WARNING\\\": Fore.BLACK + Back.YELLOW + Style.BRIGHT,\\n        \\\"ERROR\\\": Fore.WHITE + Back.LIGHTRED_EX,\\n        \\\"CRITICAL\\\": Fore.WHITE + Back.LIGHTMAGENTA_EX,\\n    },\\n)\\n\\nhandler = logging.StreamHandler(sys.stdout)\\nhandler.setFormatter(formatter)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Logging in Python","tags":["gatsby","code-notes"],"emoji":null,"link":null},"fields":{"slug":"/python_logger/"},"tableOfContents":{"items":[{"url":"#basic-example","title":"Basic example"},{"url":"#colorful-example","title":"Colorful example"}]},"parent":{"__typename":"File","relativePath":"python_logger.md"}}},"pageContext":{"id":"0b0e7010-48e0-5cdd-abbf-42c7191de36c","previous":{"id":"0c8e012d-9e2c-516e-9f8d-bd80308fdffc","frontmatter":{"title":"My Jupyter Setep Note","tags":["jupyter","env"]},"fields":{"slug":"/jupyter_lan/"}},"next":{"id":"38223809-f428-5ab5-a208-26663e9c309a","frontmatter":{"title":"How to generate and maintain this site","tags":["gatsby","code-notes"]},"fields":{"slug":"/code_notes/"}},"hasUntagged":false,"basePath":"/"}},"staticQueryHashes":["1437003973","2744905544","3664657028","467212769","467212769"]}